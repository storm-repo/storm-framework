/*
 * Copyright 2024 - 2025 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package st.orm.spi.mssqlserver;

import jakarta.annotation.Nonnull;
import st.orm.core.repository.EntityRepository;
import st.orm.core.template.PreparedQuery;
import st.orm.core.repository.impl.EntityRepositoryImpl;
import st.orm.core.template.Column;
import st.orm.core.template.Model;
import st.orm.core.template.ORMTemplate;
import st.orm.core.template.Query;
import st.orm.core.template.TemplateString;
import st.orm.core.template.impl.LazySupplier;
import st.orm.BindVars;
import st.orm.Entity;
import st.orm.PersistenceException;

import java.math.BigInteger;
import java.sql.Timestamp;
import java.time.Instant;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicReference;
import java.util.function.Supplier;
import java.util.stream.IntStream;
import java.util.stream.Stream;

import static java.util.function.Predicate.not;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.partitioningBy;
import static st.orm.GenerationStrategy.IDENTITY;
import static st.orm.GenerationStrategy.NONE;
import static st.orm.GenerationStrategy.SEQUENCE;
import static st.orm.core.template.Templates.bindVar;
import static st.orm.core.template.SqlInterceptor.intercept;
import static st.orm.core.template.TemplateString.combine;
import static st.orm.core.template.TemplateString.raw;
import static st.orm.core.template.TemplateString.wrap;
import static st.orm.core.template.impl.StringTemplates.flatten;

/**
 * Implementation of {@link EntityRepository} for SQL Server.
 */
public class MSSQLServerEntityRepositoryImpl<E extends Record & Entity<ID>, ID>
        extends EntityRepositoryImpl<E, ID> {

    public MSSQLServerEntityRepositoryImpl(@Nonnull ORMTemplate ormTemplate, @Nonnull Model<E, ID> model) {
        super(ormTemplate, model);
    }

    /**
     * Constructs a version update string for a version column. For numeric types the column is incremented,
     * for date/timestamp types CURRENT_TIMESTAMP is used.
     */
    private String getVersionString(@Nonnull Column column) {
        String columnName = column.qualifiedName(ormTemplate.dialect());
        String updateExpression = switch (column.type()) {
            case Class<?> c when Integer.TYPE.isAssignableFrom(c)
                    || Long.TYPE.isAssignableFrom(c)
                    || Integer.class.isAssignableFrom(c)
                    || Long.class.isAssignableFrom(c)
                    || BigInteger.class.isAssignableFrom(c) -> "t.%s + 1".formatted(columnName);
            case Class<?> c when Instant.class.isAssignableFrom(c)
                    || Date.class.isAssignableFrom(c)
                    || Calendar.class.isAssignableFrom(c)
                    || Timestamp.class.isAssignableFrom(c) -> "CURRENT_TIMESTAMP";
            default ->
                    throw new PersistenceException("Unsupported version type: %s.".formatted(column.type().getSimpleName()));
        };
        return "t.%s = %s".formatted(columnName, updateExpression);
    }

    /**
     * Builds a SELECT clause for the merge source based on the entityâ€™s current values.
     * (Note: Unlike Oracle, SQL Server does not require a FROM DUAL clause.)
     */
    private TemplateString mergeSelect(@Nonnull E entity) {
        assert !isAutoGeneratedPrimaryKey();
        var dialect = ormTemplate.dialect();
        var values = model.getValues(entity);
        var duplicates = new HashSet<>(); // Ensure each column appears only once.
        return values.entrySet().stream()
                .filter(entry -> duplicates.add(entry.getKey().name()))
                .map(entry -> {
                    Column column = entry.getKey();
                    Object value = entry.getValue();
                    if (column.primaryKey()) {
                        //noinspection unchecked
                        if (model.isDefaultPrimaryKey((ID) value)) {
                            value = null;   // Always pass NULL to force a mismatch.
                        }
                    }
                    return combine(wrap(value), TemplateString.of(" AS %s".formatted(column.qualifiedName(dialect))));
                })
                .reduce((left, right) -> combine(left, TemplateString.of(", "), right))
                .map(t -> combine(TemplateString.of("SELECT "), t))
                .orElseThrow();
    }

    /**
     * Builds a SELECT clause for the merge source based on bind variables.
     */
    private TemplateString mergeSelect(@Nonnull BindVars bindVars) {
        var values = new AtomicReference<Map<Column, ?>>();
        //noinspection unchecked
        bindVars.setRecordListener(record -> values.setPlain(model.getValues((E) record)));
        var duplicates = new HashSet<>();
        return model.columns().stream()
                .filter(column -> duplicates.add(column.name()))
                .map(c -> combine(wrap(bindVar(bindVars, ignore -> values.getPlain().get(c))),
                        TemplateString.of(" AS %s".formatted(c.name()))))
                .reduce((left, right) -> combine(left, TemplateString.of(", "), right))
                .map(t -> combine(TemplateString.of("SELECT "), t))
                .orElseThrow();
    }

    /**
     * Builds a SELECT clause for the merge source based on entities.
     */
    private TemplateString mergeSelect(@Nonnull Iterable<E> entities) {
        assert generationStrategy == SEQUENCE;
        List<TemplateString> valuesTemplates = new ArrayList<>();
        for (E entity : entities) {
            var values = model.getValues(entity);
            var duplicates = new HashSet<>(); // Ensure each column appears only once.
            valuesTemplates.add(values.entrySet().stream()
                    .filter(entry -> duplicates.add(entry.getKey().name()))
                    .map(entry -> {
                        Column column = entry.getKey();
                        Object value = entry.getValue();
                        if (column.primaryKey()) {
                            //noinspection unchecked
                            if (model.isDefaultPrimaryKey((ID) value)) {
                                value = null;   // Always pass NULL to force a mismatch.
                            }
                        }
                        return wrap(value);
                    })
                    .reduce((left, right) -> combine(left, TemplateString.of(", "), right))
                    .map(t -> combine(TemplateString.of("("), t, TemplateString.of(")")))
                    .orElseThrow());
        }
        return valuesTemplates.stream()
                .reduce((left, right) -> combine(left, TemplateString.of(", "), right))
                .map(t -> combine(TemplateString.of("VALUES "), t))
                .orElseThrow();
    }

    /**
     * Builds a src clause for the merge source based on bind variables.
     */
    private TemplateString mergeSource() {
        var dialect = ormTemplate.dialect();
        var duplicates = new HashSet<>(); // Ensure each column appears only once.
        return model.columns().stream()
                .filter(column -> duplicates.add(column.name()))
                .map(entry -> TemplateString.of(entry.qualifiedName(dialect)))
                .reduce((left, right) -> combine(left, TemplateString.of(", "), right))
                .orElseThrow();
    }

    /**
     * Constructs the ON clause by equating primary key columns.
     */
    private TemplateString mergeOn() {
        var dialect = ormTemplate.dialect();
        var primaryKeys = model.columns().stream()
                .filter(Column::primaryKey)
                .toList();
        String sql = primaryKeys.stream()
                .map(c -> "t.%s = src.%s".formatted(c.qualifiedName(dialect), c.qualifiedName(dialect)))
                .collect(joining(" AND "));
        return TemplateString.of(sql);
    }

    /**
     * Constructs the UPDATE clause for the MERGE statement.
     */
    private TemplateString mergeUpdate(@Nonnull AtomicBoolean versionAware) {
        var dialect = ormTemplate.dialect();
        var duplicates = new HashSet<>();
        var args = model.columns().stream()
                .filter(not(Column::primaryKey))
                .filter(Column::updatable)
                .filter(column -> duplicates.add(column.name()))
                .map(column -> {
                    if (column.version()) {
                        versionAware.setPlain(true);
                        return getVersionString(column);
                    }
                    return "t.%s = src.%s".formatted(column.qualifiedName(dialect), column.qualifiedName(dialect));
                })
                .toList();
        if (args.isEmpty()) {
            return TemplateString.EMPTY;
        }
        String sql = args.stream().collect(joining(", ", "UPDATE SET ", ""));
        return TemplateString.of("\nWHEN MATCHED THEN\n\t%s".formatted(sql));
    }

    /**
     * Constructs the INSERT clause for the MERGE statement.
     */
    private TemplateString mergeInsert() {
        var dialect = ormTemplate.dialect();
        var insertDuplicates = new HashSet<>();
        var insertArgs = model.columns().stream()
                .filter(column -> !(column.generation() == IDENTITY || (column.generation() == SEQUENCE && column.sequence().isEmpty())))
                .map(Column::name)
                .filter(insertDuplicates::add)
                .toList();
        var valuesDuplicates = new HashSet<>();
        var valuesArgs = model.columns().stream()
                .filter(column -> valuesDuplicates.add(column.name()))
                .map(column -> {
                    if (column.generation() == IDENTITY || (column.generation() == SEQUENCE && column.sequence().isEmpty())) {
                        // For auto-generated primary keys, we do not insert a value.
                        return null;
                    }
                    if (!column.sequence().isEmpty()) {
                        return "NEXT VALUE FOR %s".formatted(dialect.getSafeIdentifier(column.sequence()));
                    }
                    return "src.%s".formatted(column.qualifiedName(dialect));
                })
                .filter(Objects::nonNull)
                .toList();
        if (insertArgs.isEmpty()) {
            return TemplateString.EMPTY;
        }
        String insertSql = String.join(", ", insertArgs);
        String valuesSql = String.join(", ", valuesArgs);
        String sql = "\n\tINSERT (%s)\n\tVALUES (%s)".formatted(insertSql, valuesSql);
        return TemplateString.of("\nWHEN NOT MATCHED THEN%s".formatted(sql));
    }

    /**
     * Validates the entity for an upsert operation.
     */
    protected E validateUpsert(@Nonnull E entity) {
        if (isAutoGeneratedPrimaryKey() && !model.isDefaultPrimaryKey(entity.id())) {
            throw new PersistenceException("Primary key must not be set for auto-generated primary keys for upserts.");
        }
        return entity;
    }

    /**
     * Inserts or updates a single entity in the database.
     */
    @Override
    public void upsert(@Nonnull E entity) {
        if (isUpdate(entity)) {
            update(entity);
            return;
        }
        if (isAutoGeneratedPrimaryKey()) {
            // In auto-generated mode, an insert is performed.
            insert(entity);
            return;
        }
        validateUpsert(entity);
        var versionAware = new AtomicBoolean();
        intercept(sql -> sql.versionAware(versionAware.getPlain()), () -> {
            // Note: SQL Serverâ€™s MERGE syntax does not require a FROM DUAL clause.
            var query = ormTemplate.query(flatten(raw("""
                MERGE INTO \0 t
                USING (\0) src
                ON (\0)\0\0;""", model.type(), mergeSelect(entity), mergeOn(), mergeUpdate(versionAware), mergeInsert())));
                query.executeUpdate();
        });
    }

    /**
     * Inserts or updates a single entity and returns its ID.
     */
    @Override
    public ID upsertAndFetchId(@Nonnull E entity) {
        if (isUpdate(entity)) {
            update(entity);
            return entity.id();
        }
        if (isAutoGeneratedPrimaryKey()) {
            return insertAndFetchId(entity);
        }
        validateUpsert(entity);
        upsert(entity);
        return entity.id();
    }

    /**
     * Inserts or updates a single entity and returns the entityâ€™s current state.
     */
    @Override
    public E upsertAndFetch(@Nonnull E entity) {
        return getById(upsertAndFetchId(entity));
    }

    /**
     * Batch upsert for an iterable of entities.
     */
    @Override
    public void upsert(@Nonnull Iterable<E> entities) {
        upsert(toStream(entities), defaultBatchSize);
    }

    /**
     * Batch upsert for an iterable of entities returning a list of IDs.
     */
    @Override
    public List<ID> upsertAndFetchIds(@Nonnull Iterable<E> entities) {
        if (generationStrategy != SEQUENCE) {
            return upsertAndFetchIdsNoSequence(entities);
        }
        if (!primaryKeyColumns.getFirst().sequence().isEmpty()) {
            //
            // The following SQL would be generated if the sequence is non-empty:
            //
            // MERGE INTO table t
            // USING (VALUES (?, ?), (?, ?)) AS src(id, name)
            // ON (t.id = src.id)
            // WHEN MATCHED THEN
            //   UPDATE SET t.name = src.name, t.owner_id = src.owner_id
            // WHEN NOT MATCHED THEN
            //   INSERT (id, name)
            //	  VALUES (NEXT VALUE FOR seq_id, src.name)
            // OUTPUT INSERTED.id;
            //
            // However, this would result in the following error:
            // NEXT VALUE FOR function can only be used with MERGE if it is defined within a default constraint on the target table for insert actions.
            //
            throw new PersistenceException("MSSQLServer does not support combining sequence-based ID generation with fetch mode. " +
                    "Use the column's DEFAULT constraint for sequence values instead.");
        }
        LazySupplier<PreparedQuery> updateQuery = new LazySupplier<>(this::prepareUpdateQuery);
        try {
            return chunked(toStream(entities), defaultBatchSize, batch -> {
                var result = new ArrayList<ID>();
                var partition = partition(batch);
                result.addAll(updateAndFetchIds(partition.get(true), updateQuery));
                result.addAll(getUpsertQuery(partition.get(false)).getResultList(model.primaryKeyType()));
                return result.stream();
            }).toList();
        } finally {
            updateQuery.value().ifPresent(PreparedQuery::close);
        }
    }

    private Query getUpsertQuery(@Nonnull Iterable<E> entities) {
        var versionAware = new AtomicBoolean();
        assert primaryKeyColumns.size() == 1;
        var primaryKeyColumn = primaryKeyColumns.getFirst();
        String pkName = primaryKeyColumn.qualifiedName(ormTemplate.dialect());
        return intercept(sql -> sql.versionAware(versionAware.getPlain()), () ->
                ormTemplate.query(flatten(raw("""
                    MERGE INTO \0 t
                    USING (\0) AS src(\0)
                    ON (\0)\0\0
                    OUTPUT INSERTED.%s;""".formatted(pkName), model.type(), mergeSelect(entities), mergeSource(), mergeOn(), mergeUpdate(versionAware), mergeInsert()))
                ));
    }

    public List<ID> upsertAndFetchIdsNoSequence(@Nonnull Iterable<E> entities) {
        LazySupplier<PreparedQuery> updateQuery = new LazySupplier<>(this::prepareUpdateQuery);
        LazySupplier<PreparedQuery> insertQuery = new LazySupplier<>(this::prepareInsertQuery);
        LazySupplier<PreparedQuery> upsertQuery = new LazySupplier<>(this::prepareUpsertQuery);
        try {
            return chunked(toStream(entities), defaultBatchSize, batch -> {
                var partition = partition(batch);
                var result = new ArrayList<>(updateAndFetchIds(partition.get(true), updateQuery));
                if (isAutoGeneratedPrimaryKey()) {
                    result.addAll(insertAndFetchIds(partition.get(false), insertQuery));
                } else {
                    result.addAll(upsertAndFetchIds(partition.get(false), upsertQuery));
                }
                return result.stream();
            }).toList();
        } finally {
            closeQuietly(updateQuery, insertQuery, upsertQuery);
        }
    }

    /**
     * Batch upsert for an iterable of entities returning the updated entities.
     */
    @Override
    public List<E> upsertAndFetch(@Nonnull Iterable<E> entities) {
        return findAllById(upsertAndFetchIds(entities));
    }

    /**
     * Batch upsert for a stream of entities.
     */
    @Override
    public void upsert(@Nonnull Stream<E> entities) {
        upsert(entities, defaultBatchSize);
    }

    /**
     * Batch upsert for a stream of entities in configurable batch sizes.
     */
    @Override
    public void upsert(@Nonnull Stream<E> entities, int batchSize) {
        LazySupplier<PreparedQuery> updateQuery = new LazySupplier<>(this::prepareUpdateQuery);
        LazySupplier<PreparedQuery> insertQuery = new LazySupplier<>(this::prepareInsertQuery);
        LazySupplier<PreparedQuery> upsertQuery = new LazySupplier<>(this::prepareUpsertQuery);
        try {
            chunked(entities, batchSize).forEach(batch -> {
                var partition = partition(batch);
                update(partition.get(true), updateQuery);
                if (isAutoGeneratedPrimaryKey()) {
                    insert(partition.get(false), insertQuery);
                } else {
                    upsert(partition.get(false), upsertQuery);
                }
            });
        } finally {
            closeQuietly(updateQuery, insertQuery, upsertQuery);
        }
    }

    private boolean isUpdate(@Nonnull E entity) {
        return isAutoGeneratedPrimaryKey() && !model.isDefaultPrimaryKey(entity.id());
    }

    private Map<Boolean, List<E>> partition(@Nonnull List<E> entities) {
        return entities.stream().collect(partitioningBy(this::isUpdate));
    }

    protected PreparedQuery prepareUpsertQuery() {
        var bindVars = ormTemplate.createBindVars();
        var versionAware = new AtomicBoolean();
        return intercept(sql -> sql.versionAware(versionAware.getPlain()), () ->
                ormTemplate.query(flatten(raw("""
                    MERGE INTO \0 t
                    USING (\0) src
                    ON (\0)\0\0;""", model.type(), mergeSelect(bindVars), mergeOn(), mergeUpdate(versionAware), mergeInsert()))
                ).prepare());
    }

    protected void upsert(@Nonnull List<E> batch, @Nonnull Supplier<PreparedQuery> querySupplier) {
        if (batch.isEmpty()) {
            return;
        }
        var query = querySupplier.get();
        batch.stream().map(this::validateUpsert).map(Record.class::cast).forEach(query::addBatch);
        int[] result = query.executeBatch();
        if (IntStream.of(result).anyMatch(r -> r != 0 && r != 1 && r != 2)) {
            throw new PersistenceException("Batch upsert failed.");
        }
    }

    protected List<ID> upsertAndFetchIds(@Nonnull List<E> batch, @Nonnull Supplier<PreparedQuery> querySupplier) {
        if (batch.isEmpty()) {
            return List.of();
        }
        var query = querySupplier.get();
        batch.stream().map(this::validateUpsert).map(Record.class::cast).forEach(query::addBatch);
        int[] result = query.executeBatch();
        if (IntStream.of(result).anyMatch(r -> r != 0 && r != 1 && r != 2)) {
            throw new PersistenceException("Batch upsert failed.");
        }
        if (isAutoGeneratedPrimaryKey()) {
            try (var generatedKeys = query.getGeneratedKeys(model.primaryKeyType())) {
                return generatedKeys.toList();
            }
        }
        return batch.stream().map(Entity::id).toList();
    }

    @Override
    public ID insertAndFetchId(@Nonnull E entity) {
        if (generationStrategy != SEQUENCE) {
            return super.insertAndFetchId(entity);
        }
        validateInsert(entity);
        assert primaryKeyColumns.size() == 1;
        var primaryKeyColumn = primaryKeyColumns.getFirst();
        String pkName = primaryKeyColumn.qualifiedName(ormTemplate.dialect());
        try (var query = ormTemplate.query(TemplateString.raw("""
                INSERT INTO \0
                OUTPUT INSERTED.%s
                VALUES \0""".formatted(pkName), model.type(), entity)).prepare()) {
            return query.getSingleResult(model.primaryKeyType());
        }
    }

    @Override
    public List<ID> insertAndFetchIds(@Nonnull Iterable<E> entities) {
        if (generationStrategy == NONE) {
            return super.insertAndFetchIds(entities);
        }
        // Also use MSSQLServer specific logic for AUTO_INCREMENT as MSSQLServer does not support generated keys in batch mode.
        entities.forEach(this::validateInsert);
        assert primaryKeyColumns.size() == 1;
        var primaryKeyColumn = primaryKeyColumns.getFirst();
        String pkName = primaryKeyColumn.qualifiedName(ormTemplate.dialect());
        var query = ormTemplate.query(TemplateString.raw("""
            INSERT INTO \0
            OUTPUT INSERTED.%s
            VALUES \0""".formatted(pkName), model.type(), entities));
        return query.getResultList(model.primaryKeyType());
    }

    /**
     * Helper method to close lazy-supplied queries without one exception blocking another.
     */
    private void closeQuietly(LazySupplier<PreparedQuery> updateQuery,
                              LazySupplier<PreparedQuery> insertQuery,
                              LazySupplier<PreparedQuery> upsertQuery) {
        try {
            upsertQuery.value().ifPresent(PreparedQuery::close);
        } finally {
            try {
                insertQuery.value().ifPresent(PreparedQuery::close);
            } finally {
                updateQuery.value().ifPresent(PreparedQuery::close);
            }
        }
    }
}