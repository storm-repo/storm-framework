/*
 * Copyright 2024 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package st.orm.template;

import jakarta.annotation.Nonnull;
import st.orm.template.impl.SqlInterceptorManager;

import java.util.function.Consumer;
import java.util.function.UnaryOperator;

/**
 * Interceptor for SQL statement generation events.
 *
 * <p>This interceptor is invoked during the generation of SQL statements by the {@link SqlTemplate}, and not during
 * their execution. It allows you to inspect SQL statements before they are sent to the database, operating completely
 * separate from the execution phase.</p>
 *
 * @since 1.1
 */
public interface SqlInterceptor extends AutoCloseable {

    /**
     * Register a global consumer that will be called for all SQL statements being generated.
     *
     * @param consumer the consumer to call for each SQL statement.
     */
    static void registerGlobalConsumer(@Nonnull Consumer<Sql> consumer) {
        SqlInterceptorManager.registerGlobalConsumer(consumer);
    }

    /**
     * Register a global interceptor that will be called for all SQL statements being generated.
     *
     * @param interceptor the interceptor to call for each SQL statement.
     */
    static void registerGlobalInterceptor(@Nonnull UnaryOperator<Sql> interceptor) {
        SqlInterceptorManager.registerGlobalInterceptor(interceptor);
    }

    /**
     * Unregister a global consumer.
     *
     * @param consumer the consumer to unregister.
     */
    static void unregisterGlobalConsumer(@Nonnull Consumer<Sql> consumer) {
        SqlInterceptorManager.unregisterGlobalConsumer(consumer);
    }

    /**
     * Unregister a global interceptor.
     *
     * @param interceptor the interceptor to unregister.
     */
    static void unregisterGlobalInterceptor(@Nonnull UnaryOperator<Sql> interceptor) {
        SqlInterceptorManager.unregisterGlobalConsumer(interceptor);
    }

    /**
     * Create a new interceptor that will be called for SQL statements generated by the current thread. The interceptor
     * must be closed when it is no longer needed. It is recommended to use a try-with-resources block to ensure that
     * the interceptor is closed.
     *
     * @param consumer the consumer to call for each SQL statement.
     * @return the interceptor.
     */
    static SqlInterceptor consume(@Nonnull Consumer<Sql> consumer) {
        return SqlInterceptorManager.create(consumer);
    }

    /**
     * Create a new interceptor that will be called for SQL statements generated by the current thread. The interceptor
     * must be closed when it is no longer needed. It is recommended to use a try-with-resources block to ensure that
     * the interceptor is closed.
     *
     * @param interceptor the consumer to call for each SQL statement.
     * @return the interceptor.
     */
    static SqlInterceptor intercept(@Nonnull UnaryOperator<Sql> interceptor) {
        return SqlInterceptorManager.create(interceptor);
    }

    /**
     * Close the interceptor.
     */
    @Override
    void close();
}
